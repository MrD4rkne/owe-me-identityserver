name: SonarQube

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      SLN_FILE: OweMe.Identity.sln

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for SonarCloud analysis

      - name: Define Cache Directory Variable
        run: echo "CACHE_DIR=$HOME/.sonar" >> $GITHUB_ENV

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          # Create the cache directory if it doesn't exist
          mkdir -p ${{ env.CACHE_DIR }}/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ${{ env.CACHE_DIR }}/scanner
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}
          
      - name: Setup docker
        uses: docker/setup-buildx-action@v3

      - uses: dotnet/nbgv@master
        id: nbgv
      
      - name: Get version
        run: echo "${{ steps.nbgv.outputs.SemVer2 }}"

      - name: SonarQube Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        run: |
          scannerPath="$CACHE_DIR/scanner/dotnet-sonarscanner"

          # Run SonarScanner Begin with quality gate waiting enabled
          "$scannerPath" begin /k:"$SONAR_PROJECT_KEY" \
            /o:"$SONAR_ORG" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /d:sonar.scanner.scanAll=false \
            /d:sonar.cs.vstest.reportsPaths="${{ github.workspace }}/*.trx" \
            /d:sonar.cs.opencover.reportsPaths="${{ github.workspace }}/*/coverage.cobertura.xml"

      - name: Dotnet restore
        run: |
          dotnet restore
          
      - name: Build
        run: |
          dotnet build --configuration Release --no-restore
          
      - name: Test with coverage
        id: test
        run: |
          dotnet test --logger trx --collect:"XPlat Code Coverage"

      - name: List test results
        run: |
          find . -name "*.xml" -o -name "*.trx" -type f

      - name: SonarQube End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        run: |
          scannerPath="$CACHE_DIR/scanner/dotnet-sonarscanner"
          
          # Run SonarScanner End securely
          "$scannerPath" end /d:sonar.token="$SONAR_TOKEN"
