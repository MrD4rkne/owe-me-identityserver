name: SonarQube

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarCloud analysis

      - name: Define Cache Directory Variable
        run: echo "CACHE_DIR=$HOME/.sonar" >> $GITHUB_ENV

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        working-directory: ${{ env.CACHE_DIR }}
        shell: powershell
        run: |
          New-Item -Path $env:CACHE_DIR/scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path $env:CACHE_DIR/scanner
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}

      - name: Install dotcover
        shell: powershell
        run: |
          dotnet tool install --global JetBrains.dotCover.GlobalTool

      - name: SonarQube Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        working-directory: ./src
        shell: powershell
        run: |
          $scannerPath = "$env:CACHE_DIR/scanner/dotnet-sonarscanner"

          # Run SonarScanner Begin with quality gate waiting enabled
          & $scannerPath begin /k:"$env:SONAR_PROJECT_KEY" `
            /o:"$env:SONAR_ORG" `
            /d:sonar.token="$env:SONAR_TOKEN" `
            /d:sonar.host.url="$env:SONAR_HOST_URL" `
            /d:sonar.cs.dotcover.reportsPaths=dotCover.Output.html `
            /d:sonar.scanner.scanAll=false `
            /d:sonar.qualitygate.wait=true `
            /d:sonar.qualitygate.timeout=300

      - name: Dotnet restore
        working-directory: ./src
        shell: powershell
        run: |
          dotnet restore
          
      - name: Build
        working-directory: ./src
        shell: powershell
        run: |
          dotnet build --configuration Release --no-restore
          
      - name: Test with coverage
        working-directory: ./src
        shell: powershell
        run: |
          dotnet dotcover test --configuration Release --no-restore --no-build --verbosity normal `
          --dcReportType=HTML --dcattributeFilters=System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute

      - name: SonarQube End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        working-directory: ./src
        shell: powershell
        run: |
          $scannerPath = "$env:CACHE_DIR/scanner/dotnet-sonarscanner"
          
          # Run SonarScanner End securely
          & $scannerPath end /d:sonar.token="$env:SONAR_TOKEN"
